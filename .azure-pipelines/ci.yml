# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

pr: none
trigger:
- master

pool:
  default

jobs:
- job: Build
  steps:
  - task: Docker@2
    inputs:
      containerRegistry: 'ajami1331.azurecr.io'
      repository: 'araf.aljami.me'
      command: 'buildAndPush'
      tags: latest
      Dockerfile: '**/Dockerfile'
  - task: CopyFiles@2
    displayName: 'Copy Files to artifact staging directory'
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: 'docker-compose.yml'
      TargetFolder: $(Build.ArtifactStagingDirectory)/docker-compose
  - upload: $(Build.ArtifactStagingDirectory)/docker-compose
    artifact: docker-compose

- deployment: VMDeploy
  dependsOn: Build
  displayName: web
  environment:
    name: prod
    resourceType: VirtualMachine
    tags: web
  strategy:
    rolling:
      maxParallel: 100%
      preDeploy:
        steps:
          - download: current
            artifact: docker-compose
          - script: echo downloaded built artifact
      deploy:
        steps:
          - script: |
              set -e
              # rm -rf ~/araf.aljami.me/
              # cp -r $(Pipeline.Workspace)/build ~/araf.aljami.me/
              # sudo service nginx restart

          - task: Docker@2
            inputs:
              containerRegistry: 'ajami1331.azurecr.io'
              command: 'login'
          
          - task: DockerCompose@0
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureSubscription: 'Visual Studio Enterprise Subscription(fd24d692-fa14-4ae1-bc9c-b6bd3c64d6d0)'
              azureContainerRegistry: '{"loginServer":"ajami1331.azurecr.io", "id" : "/subscriptions/fd24d692-fa14-4ae1-bc9c-b6bd3c64d6d0/resourceGroups/araf-build-agents/providers/Microsoft.ContainerRegistry/registries/ajami1331"}'
              dockerComposeFile: '$(Pipeline.Workspace)/docker-compose/docker-compose.yml'
              qualifyImageNames: false
              projectName: 
              action: 'Run services'
              buildImages: false

      routeTraffic:
          steps:
          - script: echo routing traffic
      postRouteTraffic:
          steps:
          - script: echo health check post-route traffic
      on:
        failure:
          steps:
          - script: echo Restore from backup! This is on failure
        success:
          steps:
          - script: echo Notify! This is on success